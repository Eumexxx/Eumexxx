<<<<<<< HEAD
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    // This will check for the number of command-line arguments
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <children>\n", argv[0]);
        exit(1);
    }

    // Change the command-line argument to an integer
    int children = atoi(argv[1]);

    int i; // Declare i here

    // Create multiple child processes
    for (i = 0; i < children; i++) {
        pid_t pid = fork();  // Fork a child process

        if (pid < 0) {
            // Fork Error code
            perror("Fork failed");
            exit(1);
        } else if (pid == 0) {
            // Child process
            printf("Hi, (child with) PID %d\n", getpid());  
            exit(0);
        }
    }

    // Parent process
    int j; // Declare j here
    for (j = 0; j < children; j++) {
        wait(NULL);  // will wait for the child processes to finish
    }

    printf("the children are done.\n");

    return 0;
}
=======
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    // This will check for the number of command-line arguments
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <children>\n", argv[0]);
        exit(1);
    }

    // Change the command-line argument to an integer
    int children = atoi(argv[1]);

    int i; // Declare i here

    // Create multiple child processes
    for (i = 0; i < children; i++) {
        pid_t pid = fork();  // Fork a child process

        if (pid < 0) {
            // Fork Error code
            perror("Fork failed");
            exit(1);
        } else if (pid == 0) {
            // Child process
            printf("Hi, (child with) PID %d\n", getpid());  
            exit(0);
        }
    }

    // Parent process
    int j; // Declare j here
    for (j = 0; j < children; j++) {
        wait(NULL);  // will wait for the child processes to finish
    }

    printf("the children are done.\n");

    return 0;
}
>>>>>>> 96b0a14b28dbd9e67d5af405f7e9f7e686abf08a
